name: Dependency Review
run-name: Checking dependencies for vulnerabilities 🔍

on:
  pull_request:
    branches: [ "main" ]
  merge_group:
    branches: [ "main" ]
  schedule:
    - cron: '21 6 * * 1'
  push:
    branches: [ "main" ]

              
permissions:
  # Require writing security events to upload SARIF file to security tab
  security-events: write
  # Read commit contents
  contents: read 
  # Write security summary on pr
  pull-requests: write 

# Requires setting up Advanced security settings including enabling the Dependency graph option.
jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          license-check: true
          comment-summary-in-pr: true


  scan-scheduled:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78" # v1.7.1
    with:
      # Example of specifying custom arguments
      scan-args: |-
        -r
        --skip-git
        ./

  scan-pr:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v1.8.1" # v1.7.1
    with:
      # Example of specifying custom arguments
      scan-args: |-
        -r
        --skip-git
        ./

  pixi-packages-check:
    name: Pixi Dependencies Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: latest
          cache: true

      - name: Install dependencies
        run: pixi install
        continue-on-error: true

      - name: List and analyze Pixi packages
        run: |
          echo "## 📦 Pixi Dependencies Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List packages
          echo "Extracting package information..."
          pixi list --json > pixi-packages.json || true
          
          # Count packages and environments
          if [ -f "pixi-packages.json" ]; then
            python3 -c "
            import json
            import sys
            
            try:
                with open('pixi-packages.json', 'r') as f:
                    data = json.load(f)
                
                total_packages = 0
                environments = []
                
                if isinstance(data, dict):
                    for env_name, env_data in data.items():
                        environments.append(env_name)
                        if isinstance(env_data, dict) and 'packages' in env_data:
                            total_packages += len(env_data['packages'])
                
                print(f'- **Total packages:** {total_packages}')
                print(f'- **Environments:** {environments}')
                print(f'- **Configuration file:** pixi.toml')
                
            except Exception as e:
                print(f'Error analyzing packages: {e}')
            " >> $GITHUB_STEP_SUMMARY || echo "Could not analyze pixi packages" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: Upload Pixi analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pixi-vulnerability-analysis
          path: pixi-packages.json

  security-summary:
    name: Security Review Summary
    runs-on: ubuntu-latest
    needs: [dependency-review, scan-scheduled, scan-pr, pixi-packages-check]
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "## 🔒 Dependency Security Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Review | ${{ needs.dependency-review.result }} | GitHub's dependency review for PRs |" >> $GITHUB_STEP_SUMMARY
          echo "| OSV-Scanner (Scheduled) | ${{ needs.scan-scheduled.result }} | Scan scheduled via cron job |" >> $GITHUB_STEP_SUMMARY
          echo "| OSV-Scanner (PR) | ${{ needs.scan-pr.result }} | Scan on PR |" >> $GITHUB_STEP_SUMMARY
          echo "| Pixi Security Check | ${{ needs.pixi-packages-check.result }} | Pixi/conda package analysis |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review any flagged vulnerabilities immediately" >> $GITHUB_STEP_SUMMARY
          echo "- Update vulnerable dependencies to latest secure versions" >> $GITHUB_STEP_SUMMARY
          echo "- Enable Dependabot for automated security updates" >> $GITHUB_STEP_SUMMARY
          echo "- Regularly audit dependencies for known vulnerabilities" >> $GITHUB_STEP_SUMMARY