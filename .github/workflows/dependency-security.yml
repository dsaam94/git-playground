name: Dependency Security Scan
run-name: Scanning dependencies for security vulnerabilities 📦

on:
  push:
    branches: "*"
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'pixi.toml'

  pull_request:
    branches: "*"
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'pixi.toml'

  workflow_dispatch:
  schedule:
    # Run daily at 4 AM UTC
    - cron: '0 4 * * *'

jobs:

  pixi-security-scan:
    name: Pixi Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: latest
          cache: true
          #this is needed in order to avoid exceeding the 10GB size limit in Github actions
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}

      - name: Install dependencies
        run: pixi install
        continue-on-error: true

      - name: Convert pixi.lock to OSV-compatible formats
        run: |
          echo "=== Converting pixi.lock to OSV-Scanner formats ==="
          
          # Install PyYAML for parsing pixi.lock
          pip3 install pyyaml
          
          # Run pixi.lock to OSV converter
          python3 scripts/pixi_to_osv.py
          
          # Display conversion results
          echo "=== Conversion Results ==="
          ls -la osv-lockfiles/
          
          echo "=== Conversion Summary ==="
          if [ -f "osv-lockfiles/conversion-summary.json" ]; then
            python3 -c "
            import json
            with open('osv-lockfiles/conversion-summary.json', 'r') as f:
                summary = json.load(f)
            
            conv = summary['conversion_summary']
            print(f'📦 Total packages found: {conv[\"total_packages_found\"]}')
            print(f'🐍 Python packages: {conv[\"python_packages\"]}')
            print(f'📋 Conda packages: {conv[\"conda_packages\"]}')
            print(f'🏗️  Environments: {conv[\"environments\"]}')
            print(f'💻 Platforms: {conv[\"platforms\"]}')
            print(f'📁 OSV files created: {summary[\"osv_files_created\"]}')
            
            print('\n📋 Sample packages converted:')
            for pkg in summary['packages'][:5]:
                print(f'  • {pkg[\"name\"]}=={pkg[\"version\"]} ({pkg[\"ecosystem\"]})')
            " || echo "Could not parse conversion summary"
          fi
          
          # Also create the original pixi list for reference
          echo "Creating pixi list reference..."
          pixi list --json > osv-lockfiles/pixi-dependencies.json || true
        continue-on-error: true

      - name: Run OSV-Scanner on converted lockfiles
        run: |
          echo "=== OSV-Scanner on Converted Lockfiles ==="
          
          if [ ! -d "osv-lockfiles" ]; then
            echo "❌ No osv-lockfiles directory found"
            exit 1
          fi
          
          # Install OSV-Scanner
          echo "Installing OSV-Scanner..."
          curl -sSfL https://raw.githubusercontent.com/google/osv-scanner/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan each converted format
          echo "🔍 Scanning requirements.txt (Python packages)..."
          if [ -f "osv-lockfiles/requirements.txt" ]; then
            echo "Python packages to scan:"
            head -10 osv-lockfiles/requirements.txt
            osv-scanner --format json osv-lockfiles/requirements.txt > osv-lockfiles/osv-python-results.json || true
            osv-scanner osv-lockfiles/requirements.txt || echo "Python scan completed with findings"
          fi
          
          echo "🔍 Scanning conda-requirements.txt (All conda packages)..."
          if [ -f "osv-lockfiles/conda-requirements.txt" ]; then
            echo "First 10 conda packages:"
            head -10 osv-lockfiles/conda-requirements.txt
            osv-scanner --format json osv-lockfiles/conda-requirements.txt > osv-lockfiles/osv-conda-results.json || true
            osv-scanner osv-lockfiles/conda-requirements.txt || echo "Conda scan completed with findings"
          fi
          
          echo "🔍 Scanning OSV lockfile format..."
          if [ -f "osv-lockfiles/osv-lockfile.json" ]; then
            osv-scanner --format json osv-lockfiles/osv-lockfile.json > osv-lockfiles/osv-manifest-results.json || true
            osv-scanner osv-lockfiles/osv-lockfile.json || echo "Manifest scan completed with findings"
          fi
          
          echo "🔍 Scanning npm-style package-lock.json..."
          if [ -f "osv-lockfiles/package-lock.json" ]; then
            osv-scanner --format json osv-lockfiles/package-lock.json > osv-lockfiles/osv-npm-results.json || true
            osv-scanner osv-lockfiles/package-lock.json || echo "NPM-style scan completed with findings"
          fi
          
          # Create vulnerability summary
          echo "=== OSV Scan Results Summary ==="
          python3 -c "
          import json
          import os
          from pathlib import Path
          
          vuln_dir = Path('osv-lockfiles')
          result_files = list(vuln_dir.glob('osv-*-results.json'))
          
          print(f'📊 Generated {len(result_files)} OSV scan result files')
          
          total_vulns = 0
          for result_file in result_files:
              try:
                  with open(result_file, 'r') as f:
                      result_data = json.load(f)
                  
                  # Count vulnerabilities based on OSV-Scanner output format
                  vulns = 0
                  if 'results' in result_data:
                      for result in result_data['results']:
                          if 'packages' in result:
                              for pkg in result['packages']:
                                  if 'vulnerabilities' in pkg:
                                      vulns += len(pkg['vulnerabilities'])
                  
                  scan_type = result_file.stem.replace('osv-', '').replace('-results', '')
                  print(f'  📄 {scan_type}: {vulns} vulnerabilities found')
                  total_vulns += vulns
                  
              except Exception as e:
                  print(f'  ❌ Error parsing {result_file.name}: {e}')
          
          if total_vulns > 0:
              print(f'\n🚨 TOTAL VULNERABILITIES FOUND: {total_vulns}')
          else:
              print(f'\n✅ No vulnerabilities found in any scan')
          " || echo "Could not summarize OSV results"
          
          echo "=== OSV scan files created ==="
          ls -la osv-lockfiles/osv-*-results.json || echo "No OSV result files found"
        continue-on-error: true

      - name: Upload OSV scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pixi-osv-results
          path: |
            osv-lockfiles/
            pixi-dependencies.json

  osv-scanner:
    name: OSV Scanner (All Ecosystems)
    runs-on: ubuntu-latest
    needs: [pixi-security-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download converted pixi lockfiles
        uses: actions/download-artifact@v4
        with:
          name: pixi-osv-results
        continue-on-error: true

      - name: Run OSV-Scanner on repository (native scan)
        uses: google/osv-scanner-action@v2.2.1
        with:
          scan-args: |-
            -r
            --skip-git
            ./
        continue-on-error: true
        # Note: This scans ALL supported ecosystems including:
        # - npm (package.json, package-lock.json)
        # - pip (requirements.txt, pyproject.toml) 
        # - pixi (pixi.lock)
        # - go (go.mod, go.sum)
        # - rust (Cargo.toml, Cargo.lock)
        # - maven, gradle, etc.

      - name: Run OSV-Scanner on converted pixi formats
        run: |
          echo "=== OSV-Scanner on Converted Pixi Lockfiles ==="
          
          # Install OSV-Scanner if not available
          if ! command -v osv-scanner &> /dev/null; then
            echo "Installing OSV-Scanner..."
            curl -sSfL https://raw.githubusercontent.com/google/osv-scanner/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          fi
          
          if [ -d "osv-lockfiles" ]; then
            echo "Found converted lockfiles directory"
            ls -la osv-lockfiles/
            
            echo "🔍 Running OSV-Scanner on converted formats..."
            
            # Scan all converted formats at once
            osv-scanner --format json osv-lockfiles/ > osv-converted-results.json || true
            osv-scanner osv-lockfiles/ || echo "OSV scan completed"
            
            # Display summary of findings
            if [ -f "osv-converted-results.json" ]; then
              echo "=== OSV Scan Results from Converted Files ==="
              python3 -c "
              import json
              try:
                  with open('osv-converted-results.json', 'r') as f:
                      data = json.load(f)
                  
                  total_vulns = 0
                  if 'results' in data:
                      for result in data['results']:
                          if 'packages' in result:
                              for pkg in result['packages']:
                                  if 'vulnerabilities' in pkg:
                                      vulns = len(pkg['vulnerabilities'])
                                      if vulns > 0:
                                          print(f'📦 {pkg.get(\"package\", {}).get(\"name\", \"unknown\")}: {vulns} vulnerabilities')
                                      total_vulns += vulns
                  
                  if total_vulns > 0:
                      print(f'\n🚨 TOTAL VULNERABILITIES FOUND: {total_vulns}')
                  else:
                      print('✅ No vulnerabilities found in converted pixi packages')
              except Exception as e:
                  print(f'Error parsing OSV results: {e}')
              " || echo "Could not parse OSV results"
            fi
          else
            echo "❌ No osv-lockfiles directory found"
          fi
        continue-on-error: true

  github-advisory:
    name: GitHub Advisory Database
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GitHub Security Advisory
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0

  dependency-summary:
    name: Dependency Security Summary
    runs-on: ubuntu-latest
    needs: [pixi-security-scan, osv-scanner, github-advisory]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Create dependency security summary
        run: |
          echo "## 📦 Dependency Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pixi-to-OSV Conversion | ${{ needs.pixi-security-scan.result }} | Convert pixi.lock to OSV-Scanner compatible formats |" >> $GITHUB_STEP_SUMMARY
          echo "| OSV-Scanner | ${{ needs.osv-scanner.result }} | Multi-ecosystem vulnerability scanner on converted formats |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Advisory | ${{ needs.github-advisory.result }} | GitHub's security advisory database |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pixi Package Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Display conversion summary if available
          if [ -f "osv-lockfiles/conversion-summary.json" ]; then
            echo "- **Total packages analyzed:** \$(cat osv-lockfiles/conversion-summary.json | jq -r '.conversion_summary.total_packages_found // \"unknown\"')" >> $GITHUB_STEP_SUMMARY
            echo "- **Python packages identified:** \$(cat osv-lockfiles/conversion-summary.json | jq -r '.conversion_summary.python_packages // \"unknown\"')" >> $GITHUB_STEP_SUMMARY
            echo "- **OSV-compatible formats created:** \$(cat osv-lockfiles/conversion-summary.json | jq -r '.osv_files_created | length')" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Display OSV scan results if available
          if [ -f "osv-converted-results.json" ]; then
            VULN_COUNT=\$(cat osv-converted-results.json | jq '[.results[]? | .packages[]? | .vulnerabilities[]?] | length' 2>/dev/null || echo "0")
            if [ "\$VULN_COUNT" != "0" ] && [ "\$VULN_COUNT" != "null" ]; then
              echo "- **🚨 Vulnerabilities found:** \$VULN_COUNT" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **✅ Vulnerabilities found:** 0" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Update vulnerable dependencies immediately" >> $GITHUB_STEP_SUMMARY
          echo "- Use dependency pinning for security" >> $GITHUB_STEP_SUMMARY
          echo "- Enable Dependabot for automated updates" >> $GITHUB_STEP_SUMMARY
          echo "- Regular security audits of dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Review OSV scan results in artifacts for detailed vulnerability information" >> $GITHUB_STEP_SUMMARY
